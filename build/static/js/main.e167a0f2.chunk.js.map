{"version":3,"sources":["services/measurements.js","components/chart.js","App.js","index.js"],"names":["services_measurements","axios","get","Chart","_ref","measurements","tempValues","map","measure","temperature","humValues","relativehumidity","data","labels","Date","timestamp","date","getHours","getMinutes","slice","datasets","label","yAxisID","borderColor","fill","react_default","a","createElement","es","options","title","display","text","scales","yAxes","type","position","id","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getGroupedBy","key","groups","result","console","log","forEach","push","state","measurements1","measurements2","_this2","measurementService","then","response","distinctTags","setState","chart","React","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"qNAOeA,EAJA,WACb,OAAOC,IAAMC,IAHC,+CCuDDC,EArDD,SAAAC,GAAsB,IAAnBC,EAAmBD,EAAnBC,aAETC,EAAaD,EAAaE,IAAI,SAAAC,GAAO,OAAIA,EAAQC,cACjDC,EAAYL,EAAaE,IAAI,SAAAC,GAAO,OAAIA,EAAQG,mBAIhDC,EAAO,CACXC,OAJiBR,EAAaE,IAAI,SAAAC,GAAO,OAAI,IAAIM,KAAyB,IAApBN,EAAQO,aAChCR,IAAI,SAAAS,GAAI,OAAIA,EAAKC,WAAW,KAAK,IAAMD,EAAKE,cAAcC,OAAO,KAI/FC,SAAU,CAAC,CACTC,MAAO,kBACPC,QAAS,WACTC,YAAa,oBACbC,MAAM,EACNZ,KAAMN,GAER,CACEe,MAAO,eACPC,QAAS,UACTC,YAAa,kBACbC,MAAM,EACNZ,KAAMF,KAwBV,OAEEe,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMhB,KAAOA,EAAOiB,QAvBR,CACdC,MAAO,CACLC,SAAS,EACTC,KAAM,gDAERC,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,SACNC,SAAU,OACVC,GAAI,YACH,CACDF,KAAM,SACNC,SAAU,QACVC,GAAI,kBCMCC,cA3Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAgBRQ,aAAe,SAACnC,EAAMoC,GACpB,IAAIC,EAAS,GACTC,EAAS,GASb,OARAC,QAAQC,IAAIJ,GACZpC,EAAKyC,QAAQ,SAAC3B,GACNA,EAAEsB,KAAQC,IACdA,EAAOvB,EAAEsB,IAAQ,GACjBE,EAAOI,KAAKL,EAAOvB,EAAEsB,MAEvBC,EAAOvB,EAAEsB,IAAMM,KAAK5B,KAEfwB,GA1BPV,EAAKe,MAAQ,CACXC,cAAe,GACfC,cAAe,IAJAjB,mFAQC,IAAAkB,EAAAf,KAClBgB,IAEGC,KAAK,SAAAC,GACJ,IAAMC,EAAeJ,EAAKX,aAAac,EAASjD,KAAM,WACtD8C,EAAKK,SAAS,CAAEP,cAAeM,EAAa,GAAIL,cAAeK,EAAa,wCAmBhF,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACqC,EAAD,CAAO3D,aAAesC,KAAKY,MAAMC,gBACjC/B,EAAAC,EAAAC,cAACqC,EAAD,CAAO3D,aAAesC,KAAKY,MAAME,wBArCvBQ,IAAMC,kBCCxBC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.e167a0f2.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://127.0.0.1:3001/measurements'\n\nconst getAll = () => {\n  return axios.get(baseUrl)\n}\n\nexport default { getAll }","import React from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst Chart = ({ measurements }) => {\n\n  const tempValues = measurements.map(measure => measure.temperature)\n  const humValues = measurements.map(measure => measure.relativehumidity)\n  const timestamps = measurements.map(measure => new Date(measure.timestamp * 1000))\n  const hoursMinutes = timestamps.map(date => date.getHours()+':'+('0' + date.getMinutes()).slice(-2))\n\n  const data = {\n    labels: hoursMinutes,\n    datasets: [{\n      label: 'Lämpötila',\n      yAxisID: 'tempAxis',\n      borderColor: 'rgb(255, 99, 132)',\n      fill: false,\n      data: tempValues\n    },\n    {\n      label: 'Ilmankosteus',\n      yAxisID: 'humAxis',\n      borderColor: 'rgb(45, 94, 132',\n      fill: false,\n      data: humValues\n    }]\n  }\n\n  const options = {\n    title: {\n      display: true,\n      text: 'Lämpötila ja suhteellinen ilmankosteus'\n    },\n    scales: {\n      yAxes: [\n        {\n          type: 'linear',\n          position: 'left',\n          id: 'tempAxis'\n        }, {\n          type: 'linear',\n          position: 'right',\n          id: 'humAxis'\n        }\n      ]\n    }\n  }\n\n  return (\n    //<div className='chartContainer'>\n    <div>\n      <Line data={ data } options={ options } />\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport measurementService from './services/measurements'\nimport Chart from './components/chart'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      measurements1: [],\n      measurements2: [],\n    }\n  }\n\n  componentDidMount() {\n    measurementService\n      .getAll()\n      .then(response => {\n        const distinctTags = this.getGroupedBy(response.data, 'tagname')\n        this.setState({ measurements1: distinctTags[0], measurements2: distinctTags[1]})\n      })\n  }\n\n  getGroupedBy = (data, key) => {\n    let groups = {}\n    let result = []\n    console.log(key)\n    data.forEach((a) => {\n      if (!(a[key] in groups)) {\n        groups[a[key]] = []\n        result.push(groups[a[key]])\n      }\n      groups[a[key]].push(a)\n    })\n    return result\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ruuvifrontend</h1>\n        <Chart measurements={ this.state.measurements1 } />\n        <Chart measurements={ this.state.measurements2 } />\n      </div >\n    )\n  }\n}\n\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}