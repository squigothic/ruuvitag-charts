{"version":3,"sources":["services/measurements.js","components/chart.js","components/chartTitleData.js","App.js","index.js"],"names":["require","config","baseUrl","services_measurements","console","log","concat","axios","get","Chart","_ref","measurements","tempValues","map","measure","temperature","humValues","relativehumidity","data","labels","Date","timestamp","date","getHours","getMinutes","slice","datasets","label","yAxisID","borderColor","fill","react_default","a","createElement","className","es","options","title","display","text","scales","yAxes","type","position","id","ChartTitleData","name","latestTemp","length","latestHum","chart","App","_useState","useState","_useState2","Object","slicedToArray","measurementsOne","setMeasurementsOne","_useState3","_useState4","measurementsTwo","setMeasurementsTwo","_useState5","_useState6","measurementsThree","setMeasurementsThree","_useState7","_useState8","measurementsFour","setMeasurementsFour","_useState9","_useState10","loaded","setLoaded","useEffect","measurementService","then","response","distinctTags","getGroupedBy","catch","err","key","groups","result","forEach","push","chartTitleData","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d119427a.chunk.js","sourcesContent":["import axios from 'axios'\nrequire('dotenv').config()\n\nconst baseUrl = 'https://indoortemp-f1d63.appspot.com/measurements'\n\nconst getAll = () => {\n  console.log(`Tehdään pyyntö osoitteeseen ${baseUrl}`)\n  return axios.get(baseUrl)\n}\n\nexport default { getAll }\n","import React from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst Chart = ({ measurements }) => {\n\n  const tempValues = measurements.map(measure => measure.temperature)\n  const humValues = measurements.map(measure => measure.relativehumidity)\n  const timestamps = measurements.map(measure => new Date(measure.timestamp * 1000))\n  const hoursMinutes = timestamps.map(date => date.getHours() + ':' + ('0' + date.getMinutes()).slice(-2))\n\n  const data = {\n    labels: hoursMinutes,\n    datasets: [{\n      label: 'Lämpötila',\n      yAxisID: 'tempAxis',\n      borderColor: 'rgb(255, 99, 132)',\n      fill: false,\n      data: tempValues\n    },\n    {\n      label: 'Ilmankosteus',\n      yAxisID: 'humAxis',\n      borderColor: 'rgb(45, 94, 132',\n      fill: false,\n      data: humValues\n    }]\n  }\n\n  const options = {\n    title: {\n      display: false,\n      text: 'Lämpötila ja suhteellinen ilmankosteus'\n    },\n    scales: {\n      yAxes: [\n        {\n          type: 'linear',\n          position: 'left',\n          id: 'tempAxis',\n          // ticks: {\n          //   max: 26,\n          //   min: 19\n          // }\n        }, {\n          type: 'linear',\n          position: 'right',\n          id: 'humAxis',\n          // ticks: {\n          //   max:101,\n          //   min: 80\n          // }\n        }\n      ]\n    }\n  }\n\n  return (\n    <div className='chart'>\n      <Line data={data} options={options} />\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport Chart from './chart'\n\nconst ChartTitleData = ({ data, name }) => {\n  const latestTemp = data[data.length - 1].temperature\n  const latestHum = data[data.length - 1].relativehumidity\n  //console.log('joku lämpö: ', data[data.length - 1])\n  return (\n    <div className='chartContainer'>\n      {<h4>{name}</h4>}\n      Last temperature reading: <b>{latestTemp}</b> Last humidity reading: <b>{latestHum}</b>\n\n      <Chart measurements={data} />\n    </div>\n  )\n}\n\nexport default ChartTitleData\n","import React, { useState, useEffect } from 'react'\nimport measurementService from './services/measurements'\nimport ChartTitleData from './components/chartTitleData'\n\nconst App = () => {\n  const [measurementsOne, setMeasurementsOne] = useState([])\n  const [measurementsTwo, setMeasurementsTwo] = useState([])\n  const [measurementsThree, setMeasurementsThree] = useState([])\n  const [measurementsFour, setMeasurementsFour] = useState([])\n  const [loaded, setLoaded] = useState(false)\n\n  useEffect(() => {\n    measurementService\n      .getAll()\n      .then(response => {\n        console.log('pyyntö onnistui')\n        const distinctTags = getGroupedBy(response.data, 'tagname')\n        setMeasurementsOne(distinctTags[0])\n        setMeasurementsTwo(distinctTags[1])\n        setMeasurementsThree(distinctTags[2])\n        setMeasurementsFour(distinctTags[3])\n        setLoaded(true)\n      })\n      .catch(err => {\n        console.log('virhe: ', err)\n      })\n  }, [])\n\n  const getGroupedBy = (data, key) => {\n    let groups = {}\n    let result = []\n    data.forEach((a) => {\n      if (!(a[key] in groups)) {\n        groups[a[key]] = []\n        result.push(groups[a[key]])\n      }\n      groups[a[key]].push(a)\n    })\n    return result\n  }\n\n  console.log('measurements1: ', measurementsOne)\n  console.log('measurements2: ', measurementsTwo)\n  if (loaded) {\n    return (\n      <div>\n        <h1 className='titleCentered'>Ruuvifrontend</h1>\n        <ChartTitleData data={measurementsOne} name='Parveke' />\n        <ChartTitleData data={measurementsTwo} name='Makuuhuone' />\n        <ChartTitleData data={measurementsThree} name='Kylppäri' />\n        <ChartTitleData data={measurementsFour} name='Olohuone' />\n      </div >\n    )\n  }\n\n  return (\n    <div>\n      <h1 className='titleCentered'>Ruuvifrontend</h1>\n    </div>\n  )\n}\n\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}